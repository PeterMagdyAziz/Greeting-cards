{"version":3,"sources":["components/Input.js","components/TextField.js","components/InputArray.js","api/mailApi.js","components/Form.js","components/Title.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","name","id","type","label","rest","htmlFor","component","className","TextField","as","InputArray","push","remove","receivers","form","values","map","receiver","index","fieldName","onClick","sendMail","url","recValues","submitProps","initialValues","a","console","log","requestOptions","method","headers","body","JSON","stringify","fetch","res","text","data","resetForm","setSubmitting","subject","textmsg","image","validationSchema","Yup","of","email","required","MyForm","useState","successful","setSuccessful","onSubmit","onSubmitProps","then","formik","placeholder","rows","cols","dirty","Title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc729a84.chunk.js","sourcesContent":["// field input types separate component\n\nimport React from 'react'\nimport {Field, ErrorMessage } from \"formik\"\n\nfunction Input(props) {\n\n    const {name, id, type,label,  ...rest} = props\n\n    return (\n        <div>\n            <label htmlFor={id}>{label}</label>\n            <Field type={type} id={id} name={name} {...rest}/>\n            <ErrorMessage name={name} component=\"div\" className=\"error\"/>\n        </div>\n    )\n}\n\nexport default Input\n","// field form elements separate component\n\nimport React from 'react'\nimport {Field, ErrorMessage} from \"formik\"\n\nfunction TextField(props) {\n\n    const {name, id, as, label,  ...rest} = props\n\n    return (\n        <div>\n            <label htmlFor={id}>{label}</label>\n            <Field as={as} id={id} name={name} {...rest} />\n            <ErrorMessage name={name} component=\"div\" className=\"error\"/>\n        </div>\n    )\n}\n\nexport default TextField\n","// field array separate component\n\nimport React from 'react'\nimport {Field, FieldArray, ErrorMessage} from \"formik\"\n\n\nfunction InputArray(props) {\n\n    const {name, id, label} = props \n\n    return (\n        <div>\n            <label htmlFor={id}>{label}</label>\n                <FieldArray name={name}>\n                    {\n                        props =>{\n                                    const {push, remove, form} = props;\n                                    const {values} =form;\n                                    const {receivers} = values;\n                                    return <div>\n                                        {\n                                            receivers.map((receiver, index)=>{\n                                                const fieldName = `receivers[${index}]`;\n                                                    return <div key={index}>\n                                                            <Field type=\"email\" name={fieldName} />\n                                                            {\n                                                                index > 0 && (<button type='button' onClick={() => remove(index)}> - </button>)\n                                                            }\n                                                               <button type=\"button\" onClick={()=> push(\"\")}> + </button>\n                                                                <ErrorMessage name={fieldName} component=\"div\" className=\"error\"/>\n                                                           </div>\n                                            })\n                                        }\n                                        </div>\n                                }\n                    }\n                </FieldArray>  \n        </div>\n    )\n}\n\n\nexport default InputArray\n","export const sendMail = async (url, recValues, submitProps, initialValues)=> {\n\n    console.log(submitProps);\n\n    // header for the post request\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(recValues)\n    };\n\n    // post request using async/await\n    const res = await fetch(url, requestOptions);\n    const data = await res.text();\n\n    submitProps.resetForm(initialValues); // reset form fields after submission\n\n    submitProps.setSubmitting(false);// to avoid double submission before api respond\n\n    return data // returning response from server to client \n}\n\n\n\n/**\n * // Simple POST request with a JSON body using fetch\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: 'React POST Request Example' })\n    };\n    fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n        .then(response => response.json())\n        .then(data => this.setState({ postId: data.id }));\n}\n */\n\n/*export function sendMail(url, recValues, submitProps) {\n\n    let sent \n    // TODO call api request to send Email using apiBaseUrl variable. \n    axios.post(url, recValues)\n      .then((res) =>{\n\n        // if email is valid it will send directly\n        if (res.data === \"sent\"){\n            console.log(res.data);\n            // waiting for resposnse when calling an API to avoid double submit \n            submitProps.setSubmitting(false);\n            sent = true;\n        }else if (res.data === \"verify\"){\n\n            // if first time he will have to validate his mail first \n            console.log(res.data);\n            // waiting for resposnse when calling an API to avoid double submit\n            submitProps.setSubmitting(false);\n            sent = false;\n        }  \n    })\n\n    return sent;\n}*/","import React, {useState} from 'react'\nimport {Formik, Form,} from \"formik\"\nimport * as Yup from \"yup\"\nimport Input from './Input';\nimport TextField from './TextField';\nimport InputArray from './InputArray';\nimport { sendMail } from '../api/mailApi';\n\n\nconst apiBaseUrl = \"http://localhost:4005\";\n\n// intial values of form \nconst initialValues = {\n    receivers: [\"\"],\n    subject:\"\",\n    textmsg: \"\",\n    image: \"\"\n};\n\n\n//using yup for form fields validation\nconst validationSchema = Yup.object({\n        receivers: Yup.array().of(\n            Yup.string().email(\"Invalid E-Mail\").required(\"Greet Your Friends!\"), //check type string, e-mail, and filled\n        ),\n        subject: Yup.string().required(\"Subject Required!\"),// check type string and filled\n        textmsg: Yup.string().required(\"Enter a Text!\"),// check type string and filled\n        image: Yup.string().url(\"Enter Correct URL!\").required(\"Choose an image!\")// check type string, URL and filled\n});\n\n\n\n\nfunction MyForm() {\n\n    // state for message shown when form submitted\n    const [successful, setSuccessful] = useState(false);\n\n    // action when form sumbitted \n    const onSubmit = (values, onSubmitProps)=>{\n        console.log(\"props\", onSubmitProps)\n        setSuccessful(false); // first set successful to false\n        sendMail(`${apiBaseUrl}/send`, values, onSubmitProps, initialValues)\n        .then( res => {\n            setSuccessful(res); // setting successful to true if e-mail sent\n            \n        });\n    };\n\n\n    return (\n        <Formik\n            initialValues={initialValues} // setting intial values of form fields and relting to names \n            validationSchema={validationSchema} // setting the form validation\n            onSubmit={onSubmit} // setting action of submit\n        >\n            {\n                formik=>{\n                \n                    return (\n                        <Form className=\"form-container\">\n\n                            <h2>Send To:</h2>\n\n                            <div className=\"field-style\">\n\n                                {/**field for array of receivers e-mail */}\n                                <InputArray name=\"receivers\" id=\"rec-email\" label=\"E-mail\" />                                  \n\n                            </div>\n\n\n                                {/**field for e-mail subject */}\n                                <div className=\"field-style\">\n                                    <Input name=\"subject\" id=\"email-subject\" type=\"text\" label=\"Enter Your E-mail Subject: \" />\n                                </div>\n\n                                {/**field for card image*/}\n                                <div className=\"field-style\">\n                                    <Input name=\"image\" id=\"card-image\" type=\"url\" placeholder=\"https://example.com\" label=\"Enter Image URL: \"/>\n                                </div>\n\n                                {/**field for card text*/}\n                                <div className=\"field-style\">\n                                    <TextField name=\"textmsg\" id=\"card-text\" as=\"textarea\" label=\"Enter Your Card Text\" rows=\"10\" cols=\"60\"/>\n                                </div>\n\n                            \n                                \n                            {/**submit button */}\n                            <button type=\"submit\">Send</button>\n\n                            {/**message appear when sending email is successful and form is empty after submit till we type new data*/}\n                            {\n                                (successful && !formik.dirty ? <h1 className=\"sent\">Sent successfully !!</h1> : null)\n                            }\n                        </Form>\n                    )\n                }\n            }  \n        </Formik>\n    )\n}\n\nexport default MyForm\n","import React from 'react'\n\nfunction Title() {\n    return (\n            <h1 className=\"title\">Send Your Greets To Freinds and Family</h1>\n    )\n}\n\nexport default Title\n","import './App.css';\nimport MyForm from './components/Form';\nimport Title from './components/Title';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <MyForm/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}