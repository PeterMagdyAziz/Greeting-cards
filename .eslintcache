[{"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/index.tsx":"1","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/reportWebVitals.ts":"2","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/App.tsx":"3","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/Title.tsx":"4","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/MyForm.tsx":"5","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/Input.tsx":"6","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/TextField.tsx":"7","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/InputArray.tsx":"8","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/api/mailapi.tsx":"9"},{"size":500,"mtime":1612012180452,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1612048452524,"results":"12","hashOfConfig":"11"},{"size":254,"mtime":1612030472246,"results":"13","hashOfConfig":"11"},{"size":159,"mtime":1612018624018,"results":"14","hashOfConfig":"11"},{"size":4446,"mtime":1612046794682,"results":"15","hashOfConfig":"11"},{"size":639,"mtime":1612034963556,"results":"16","hashOfConfig":"11"},{"size":654,"mtime":1612034973091,"results":"17","hashOfConfig":"11"},{"size":1889,"mtime":1612035433912,"results":"18","hashOfConfig":"11"},{"size":855,"mtime":1612039154348,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"16dlpx4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/index.tsx",[],["40","41"],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/reportWebVitals.ts",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/App.tsx",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/Title.tsx",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/MyForm.tsx",["42"],"import  React, {useState} from \"react\";\nimport * as Yup from \"yup\";\nimport {Formik, FormikHelpers} from 'formik';\nimport Input from \"./Input\";\nimport TextField from \"./TextField\"\nimport InputArray from \"./InputArray\"\nimport {sendMail}  from \"../api/mailapi\"\nimport { boolean } from \"yup/lib/locale\";\n\n\nconst apiBaseUrl : string = \"http://localhost:4005\";\n\n\ninterface MyFormValues {\n    receivers: string[];\n    subject: string;\n    textmsg: string;\n    image: string;\n}\n\n\n\nconst MyForm : React.FC <{}>=()=>{\n\n    const [successful, setSuccessful] = useState < boolean | string> (false)\n\n    const initialValues: MyFormValues = { \n        receivers: [\"\"],\n        subject:\"\",\n        textmsg: \"\",\n        image: \"\" \n    };\n\n    const validationSchema = Yup.object({\n        receivers: Yup.array().of(\n            Yup.string().email(\"Invalid E-Mail\").required(\"Greet Your Friends!\"), //check type string, e-mail, and filled\n        ),\n        subject: Yup.string().required(\"Subject Required!\"),// check type string and filled\n        textmsg: Yup.string().required(\"Enter a Text!\"),// check type string and filled\n        image: Yup.string().url(\"Enter Correct URL!\").required(\"Choose an image!\")// check type string, URL and filled\n    });\n\n\n    /*const onSubmit = (values: MyFormValues, onSubmitProps: FormikHelpers<MyFormValues>)=> {\n        console.log(\"submit\")\n        console.log({ values, onSubmitProps });\n        console.log(\"props\", onSubmitProps);\n        setSuccessful(false); // first set successful to false\n        /*sendMail(`${apiBaseUrl}/send`, values, onSubmitProps, initialValues)\n        .then( res => {\n            setSuccessful(res); // setting successful to true if e-mail sent\n            \n        });\n    };*/\n\n\n    \n    const onSubmit = (values: MyFormValues, onSubmitProps: FormikHelpers<MyFormValues>) => {\n        console.log({ values, onSubmitProps });\n        \n        \n        console.log(\"submit\")\n        console.log({ values, onSubmitProps });\n        console.log(\"props\", onSubmitProps);\n        setSuccessful(false); // first set successful to false\n        sendMail(`${apiBaseUrl}/send`, values, onSubmitProps)\n        .then( (res )  => {\n\n            setSuccessful(res); // setting successful to true if e-mail sent    \n        });\n        \n        //alert(JSON.stringify(values, null, 2));\n        //onSubmitProps.setSubmitting(false);\n        //onSubmitProps.resetForm({})\n       // setSuccessful(true);\n    }\n\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            render={(formik) => (\n                <form onSubmit={formik.handleSubmit}>\n                    \n                <h2>Send To:</h2>\n\n                {/**field for array of receivers e-mail */}\n                <div className=\"field-style\">\n                    <InputArray name=\"receivers\" id=\"rec-email\" label=\"E-mail\" />                                  \n                </div>\n\n                {/**field for e-mail subject */}\n                <div className=\"field-style\">\n                    <Input name=\"subject\" id=\"email-subject\" type=\"text\" label=\"Enter Your E-mail Subject: \" />\n                </div>\n\n                {/**field for card image*/}\n                <div className=\"field-style\">\n                    <Input name=\"image\" id=\"card-image\" type=\"url\" placeholder=\"https://example.com\" label=\"Enter Image URL: \"/>\n                </div>\n\n                 {/**field for card text*/}\n                 <div className=\"field-style\">\n                    <TextField name=\"textmsg\" id=\"card-text\" as=\"textarea\" label=\"Enter Your Card Text\" rows=\"10\" cols=\"60\"/>\n                </div>\n\n\n                 {/**submit button */}\n                 <button type=\"submit\" disabled = {formik.isSubmitting} >Send</button>\n\n                {/**message appear when sending email is successful and form is empty after submit till we type new data*/}\n                {\n                    (formik.isSubmitting ? <h1 className=\"sent\">Sending...</h1> : null)\n                }\n\n                {/**message appear when sending email is successful and form is empty after submit till we type new data*/}\n                {\n                    (successful && !formik.dirty ? <h1 className=\"sent\">Sent successfully !!</h1> : null)\n                }\n                </form>\n            )}\n        />\n          \n    )\n}\n\n\nexport default MyForm\n","/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/Input.tsx",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/TextField.tsx",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/components/InputArray.tsx",[],"/home/peter/Desktop/Indigen/reactTypeScript/mail-client/src/api/mailapi.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":8,"column":10,"nodeType":"49","messageId":"50","endLine":8,"endColumn":17},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'boolean' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]